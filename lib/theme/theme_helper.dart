import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onError.withOpacity(1),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.onError.withOpacity(1),
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onError.withOpacity(1),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(3.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onError.withOpacity(0.93),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 13.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.deepOrangeA40001,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w300,
        ),
        displayLarge: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 64.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 48.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 32.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.teal500,
          fontSize: 11.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.lightBlueA700,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.lightBlueA700,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF001A72),
    secondaryContainer: Color(0XB5000000),

    // Error colors
    errorContainer: Color(0XFFA8A8A8),
    onError: Color(0XFBFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF013A63),
    onPrimaryContainer: Color(0XFFA7A7A7),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Blue
  Color get blue100 => Color(0XFFB6CAFF);
  Color get blue50 => Color(0XFFDEE7FF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD0CECE);
  Color get blueGray10000 => Color(0X00C4D1DB);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF8C8D91);
  Color get blueGray500 => Color(0XFF487A9C);

  // BlueGrayEe
  Color get blueGray100Ee => Color(0XEED3CBCB);
  Color get blueGray100Ee01 => Color(0XEECFCECE);

  // BlueGraye
  Color get blueGray3004e => Color(0X4E869FB1);

  // BlueGrayb
  Color get blueGray8004b => Color(0X4B3F4C56);

  // Cyan
  Color get cyan900 => Color(0XFF043B61);

  // DeepOrange
  Color get deepOrange400 => Color(0XFFFD7346);
  Color get deepOrangeA200 => Color(0XFFFC6839);
  Color get deepOrangeA400 => Color(0XFFED3901);
  Color get deepOrangeA40001 => Color(0XFFEC3900);

  // DeepPurple
  Color get deepPurple50 => Color(0XFFF0E5FF);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF5F6F6);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20072 => Color(0X72ECECEC);
  Color get gray300 => Color(0XFFD9DDDF);
  Color get gray30001 => Color(0XFFE5E5E5);
  Color get gray400 => Color(0XFFC3C3C3);
  Color get gray40001 => Color(0XFFC1C1C1);
  Color get gray50 => Color(0XFFFCFCFC);
  Color get gray500 => Color(0XFF9C9C9C);
  Color get gray50001 => Color(0XFF9D9D9D);
  Color get gray50002 => Color(0XFFA1A1A1);
  Color get gray800 => Color(0XFF3A3939);

  // Indigo
  Color get indigo20045 => Color(0X4590B8D5);
  Color get indigo40058 => Color(0X584F8EBB);

  // LightBlue
  Color get lightBlue300 => Color(0XFF52B8FF);
  Color get lightBlue800 => Color(0XFF0375C5);
  Color get lightBlue80001 => Color(0XFF0975C0);
  Color get lightBlue80002 => Color(0XFF046CB5);
  Color get lightBlue900 => Color(0XFF025B9A);
  Color get lightBlue90001 => Color(0XFF014F86);
  Color get lightBlue90002 => Color(0XFF025894);
  Color get lightBlueA700 => Color(0XFF0B92F0);

  // LightBlueFb
  Color get lightBlue500Fb => Color(0XFB0DACF0);

  // Purple
  Color get purple50 => Color(0XFFF4ECFF);

  // Red
  Color get redA700 => Color(0XFFFF0202);

  // RedAB
  Color get redA700B5 => Color(0XB5FF0000);

  // Teal
  Color get teal500 => Color(0XFF00A894);
  Color get teal900 => Color(0XFF002640);
  Color get teal90000 => Color(0X000D3A59);

  // White
  Color get whiteA700 => Color(0XFFFEFEFF);
  Color get whiteA70001 => Color(0XFFFFFEFE);
  Color get whiteA70002 => Color(0XFFFFFDFD);
  Color get whiteA70003 => Color(0XFFFDFEFF);
  Color get whiteA70004 => Color(0XFFFCFEFF);

  // Yellow
  Color get yellow500 => Color(0XFFFFE92B);
  Color get yellowA700 => Color(0XFFFFD914);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
